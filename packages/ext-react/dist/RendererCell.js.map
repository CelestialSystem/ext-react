{"version":3,"sources":["../src/RendererCell.js"],"names":["Ext","define","extend","xtype","config","renderer","summaryRenderer","forceWidth","setValue","value","me","context","refreshContext","column","needsSizing","scope","getScope","markup","result","summary","getSummaryRenderer","getRenderer","call","record","dataIndex","reactor","ReactDOM","render","bodyElement","dom","isWidget","widget","Helper","overwrite","htmlEncode","toString","getForceWidth","setWidgetWidth","getWidth","updateWidth","width","oldWidth","callParent","arguments","doDestroy","react","unmountComponentAtNode","privates","el","leftPad","rightPad","rendered","getColumn","parseInt","getCachedStyle","measurer","setWidth"],"mappings":"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","file":"RendererCell.js","sourcesContent":["/**\n * Use this component to render a React element inside of a grid cell.  \n *\n *      <Grid>\n *          <Column text=\"Actions\" dataIndex=\"name\">\n *              <RendererCell\n *                  renderer={(value, record) => (\n *                      <Button text={`Call ${value}`} handler={this.onCallClick.bind(this, record)}/>\n *                  )}\n *              />\n *          </Column>\n *      </Grid>\n *\n * RendererCell is automatically used when a Column contains a renderer prop. The following\n * is equivalent to the example above:\n * \n *      <Grid>\n *          <Column \n *              text=\"Actions\" \n *              dataIndex=\"name\"\n *              renderer={(value, record) => (\n *                  <Button text={`Call ${value}`} handler={this.onCallClick.bind(this, record)}/>\n *              )}\n *          />\n *      </Grid>\n * @since 6.5.1\n */\nExt.define('Ext.react.RendererCell', {\n    extend: 'Ext.grid.cell.Base',\n    xtype: 'renderercell',\n\n    config: {\n        /**\n         * @cfg {Function} renderer\n         * A function that returns a React element or text to render. It is passed \n         * the following arguments:\n         * @cfg {Object} renderer.value The data value for the current cell.\n         * @cfg {Ext.data.Model} renderer.record The record for the current row.\n         * @cfg {Number} renderer.dataIndex The dataIndex of the current column.\n         * @cfg {Ext.grid.cell.Base} renderer.cell The current cell.\n         * @cfg {Ext.grid.column.Column} renderer.column The current column.\n         * @cfg {React.Element/String} renderer.return The React element or text to be\n         * rendered.\n         */\n        renderer: null,\n\n        /**\n         * @cfg {Function} summaryRenderer\n         * A function that returns a React element or text to render in the summary \n         * row. It is passed the following arguments:\n         * @cfg {Object} renderer.value The data value for the current cell.\n         * @cfg {React.Element/String} renderer.return The React element or text to be\n         * rendered.\n         */\n        summaryRenderer: null,\n\n        /**\n         * @cfg {Boolean} forceWidth\n         * `true` to measure the available width of the cell and set that\n         * width on the underlying widget. If `false`, the widget width will auto\n         * size.\n         */\n        forceWidth: false\n    },\n\n    setValue: function (value) {\n        var me = this, \n            context = me.refreshContext, \n            column = context.column,\n            needsSizing = false,\n            scope = column.getScope(),\n            markup, renderer, result;\n\n        if (context.summary) {\n            renderer = me.getSummaryRenderer() || column.getSummaryRenderer();\n        }\n\n        renderer = renderer || me.getRenderer() || column.getRenderer();\n\n        if (renderer) {\n            markup = renderer.call(scope, value, context.record, context.dataIndex, me, column);\n\n            if (typeof markup === 'object') {\n                // Ext.reactor.ReactDOM is set by reactor before the app is launched\n                result = Ext.reactor.ReactDOM.render(markup, me.bodyElement.dom); \n            \n                if (result.isWidget) {\n                    needsSizing = result !== me.widget;\n                    me.widget = result;\n                }\n            } else {\n                if (markup == null) {\n                    markup = '';\n                }\n\n                Ext.dom.Helper.overwrite(me.bodyElement, Ext.htmlEncode(markup.toString()));\n                me.widget = null;\n            }\n\n            if (needsSizing && me.getForceWidth()) {\n                me.setWidgetWidth(me.getWidth());\n            }\n        }\n\n        return me;\n    },\n\n    updateWidth: function (width, oldWidth) {\n        this.callParent(arguments);\n\n        if (this.getForceWidth()) {\n            this.setWidgetWidth(width);\n        }\n    },\n\n    doDestroy: function () {\n        this.widget = null;\n        Ext.react.ReactDOM.unmountComponentAtNode(this.bodyElement.dom);\n        this.callParent();\n    },\n\n    privates: {\n        setWidgetWidth: function (width) {\n            var me = this,\n                el = me.bodyElement,\n                widget, column, leftPad, rightPad;\n\n            if (!me.rendered) {\n                return;\n            }\n\n            widget = me.widget;\n\n            if (widget) {\n                column = me.getColumn();\n                leftPad = parseInt(column.getCachedStyle(el, 'padding-left'), 10) || 0;\n                rightPad = parseInt(column.getCachedStyle(el, 'padding-right'), 10) || 0;\n\n                // Give the widget a reference to ourself to allow it to do extra measuring\n                widget.measurer = column;\n                widget.setWidth(width - leftPad - rightPad);\n            }\n        }\n    }\n});\n"]}