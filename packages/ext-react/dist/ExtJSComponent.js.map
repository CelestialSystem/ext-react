{"version":3,"sources":["../src/ExtJSComponent.js"],"names":["l","Component","Children","cloneElement","EXTRenderer","union","isEqual","capitalize","cloneDeepWith","renderWhenReady","globalRoot","ExtJSComponent","element","cmp","el","reactProps","reactChildren","reactElement","_getReactStuff","rawConfigs","_getConfig","$createdByExtReact","isRootContainer","ExtReactRoot","extJSClass","target","xtype","rawConfig","componentWillMount","componentDidMount","_mountNode","createContainer","updateContainer","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","children","undefined","prop","props","config","key","substr","event","toLowerCase","listeners","console","warn","_ensureResponsivePlugin","Ext","isClassic","root","document","getElementsByClassName","renderTo","extJSConfig","responsiveConfig","plugins","Array","isArray","indexOf","push","resposive","responsive","getHostNode","getPublicInstance","_applyDefaults","defaults","map","child","type","prototype","_propForChildElement","item","rel","name","isAssignableFrom","CLASS_CACHE","Button","Menu","array","ToolTip","Column","CellBase","value","_cloneConfig","WidgetCell","Dialog","Field","initialConfig","xclass","$className","_eventNameForProp","propName","match","slice","_createConfig","includeEvents","_cloneProps","hasOwnProperty","eventName","replace","Base","_rushProps","oldProps","newProps","rushConfigs","__ExtReactUpdateConfigsBeforeChildren","oldConfigs","newConfigs","_applyProps","keys","oldValue","newValue","_replaceEvent","setter","_setterFor","ExtReactSettings","debug","log","oldHandler","newHandler","un","on","_capitalize","_getterFor","str","_precacheNode","_flags","Flags","hasCachedChildNodes","precacheNode","_doPrecacheNode","single","dom","_extCmp","_toReactChildIndex","n","items","found","i","length","_toArrayConfigIndex","indexInChildren","forEach","propForChild","_mergeConfig","index","isArrayDelete","$ExtReactConfig","getter","currentValue","filter","splice","concat","_ignoreChildrenOrder","_ExtReactIgnoreOrder","FitLayout","layout","TabPanel","wrapDOMElement","node","contentEl","cls","DOMLazyTree","insertTreeBefore","createElement","HTMLElement"],"mappings":"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","file":"ExtJSComponent.js","sourcesContent":["//import ReactDOM from 'react-dom';\nimport { l } from './index'\n//import React from 'react';\nimport { Component, Children, cloneElement } from 'react';\nimport EXTRenderer from './ExtRenderer.js'\nimport union from 'lodash.union';\nimport isEqual from 'lodash.isequal';\nimport capitalize from 'lodash.capitalize'\nimport cloneDeepWith from 'lodash.clonedeepwith';\nimport { renderWhenReady } from '..';\n\nimport { globalRoot } from './index'\n\nexport class ExtJSComponent extends Component {\n\n  constructor(element) {\n    super(element)\n    this.cmp = null;\n    this.el = null;\n\n    this.reactProps = {}\n    this.reactChildren = {}\n    this.reactElement = {}\n    this._getReactStuff(element)\n\n    this.rawConfigs = this._getConfig()\n    this.rawConfigs.$createdByExtReact = true\n\n    if(this.isRootContainer) {\n      this.rawConfigs.ExtReactRoot = true\n      this.cmp = new this.extJSClass(this.rawConfigs)\n      l(`ExtJSComponent: constructor ROOT, element: ${this.target}, xtype: ${this.xtype} (this.rawConfig, this.cmp, this)`, this.rawConfig, this.cmp, this)\n    }\n    else {\n      l(`ExtJSComponent: constructor NOTROOT, element: ${this.target}, xtype: ${this.xtype} (this.rawConfig, this)`, this.rawConfig, this)\n    }\n  }\n\n  componentWillMount() {\n    l(`ExtJSComponent: componentWillMount`)\n  }\n\n  componentDidMount() {\n    l(`ExtJSComponent: componentDidMount, element: ${this.target}, call EXTRenderer.createContainer`)\n    this._mountNode = EXTRenderer.createContainer(this.cmp)\n    //l(`ExtJSComponent: componentDidMount, element: ${this.target}, call EXTRenderer.updateContainer`)\n    l(`ExtJSComponent: componentDidMount (reactChildren, _mountNode) call EXTRenderer.updateContainer`,this.reactChildren,this._mountNode)\n    EXTRenderer.updateContainer(this.reactChildren, this._mountNode, this)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.isRootContainer) {\n      l(`ExtJSComponent: componentDidUpdate, call EXTRenderer.updateContainer, element: ${this.target}`)\n      EXTRenderer.updateContainer(this.reactChildren, this._mountNode, this);\n    }\n  }\n\n  componentWillUnmount() {\n    l(`ExtJSComponent: componentWillUnmount, call EXTRenderer.updateContainer, element: ${this.target}`)\n    EXTRenderer.updateContainer(null, this._mountNode, this);\n  }\n\n  render() {\n    return null\n  }\n\n  _getReactStuff(element) {\n    /*******reactElement */\n    if (element.children == undefined || element.children == false ) {\n      for (var prop in element) {\n        if (prop != 'children') {\n          this.reactProps[prop] = element[prop];\n        }\n      }\n    }\n    else {\n      this.reactChildren = element.children\n      if (element.props == undefined) {\n        for (var prop in element) {\n          if (prop != 'children') {\n            this.reactProps[prop] = element[prop];\n          }\n        }\n      }\n      else {\n        this.reactProps = element.props\n      }\n    }\n    this.reactElement.props = this.reactProps\n    this.reactElement.children = this.reactChildren\n  }\n\n  _getConfig() {\n    var config = {}\n    config.xtype = this.xtype\n    var props = this.reactProps\n    for (var key in props) {\n      //if (key == 'defaults') { debugger }\n      if(key.substr(0,2) === 'on') {\n        if (props[key] != undefined) {\n          var event = key.substr(2).toLowerCase()\n          if (config.listeners == undefined) {\n            config.listeners = {}\n          }\n          config.listeners[event] = props[key]\n          //MetaData\n        }\n        else {\n          console.warn('function for ' + key + ' event is not defined')\n        }\n      }\n\n      else {\n        config[key] = props[key]\n\n      }\n    }\n\n    if (config['className'] != undefined) {\n      config['cls'] = config['cls'] + ' ' + config['className']\n    }\n    this._ensureResponsivePlugin(config);\n\n    if (this.isRootContainer) {\n      if (config['layout'] == undefined) {\n        config['layout'] = 'fit'\n        if (config['cls'] != undefined) {\n          config['cls'] = config['cls'] + ' ' + 'ExtReactRoot'\n        }\n        else {\n          config['cls'] = 'ExtReactRoot'\n        }\n      }\n      if (Ext.isClassic) {\n        config['height'] = '100%'\n        config['width'] = '100%'\n        var root = document.getElementsByClassName('reactroot')[0]\n        config.renderTo = root\n      }\n      else {\n        var root = document.getElementsByClassName('x-viewport-body-el')[0]\n        if(root == undefined) {\n          root = globalRoot\n        }\n        else {\n          config['fullscreen'] = true\n        }\n        config.renderTo = root\n      }\n      this.extJSConfig = config\n    }\n    return config\n  }\n\n  _ensureResponsivePlugin(config) {\n    if (config.responsiveConfig) {\n      const { plugins } = config;\n\n      if (plugins == null) {\n        config.plugins = 'responsive';\n      } else if (Array.isArray(plugins) && plugins.indexOf('responsive') === -1) {\n        plugins.push('responsive');\n      } else if (typeof plugins === 'string') {\n        if (plugins !== 'responsive') {\n          config.plugins = [plugins, 'responsive'];\n      }\n      } else if (!plugins.resposive) {\n        plugins.responsive = true;\n      }\n    }\n  }\n\n  /**\n   * Returns the Ext JS component instance\n   */\n  getHostNode() {\n    return this.el;\n  }\n\n  /**\n   * Returns the Ext JS component instance\n   */\n  getPublicInstance() {\n    return this.cmp;\n  }\n\n  _applyDefaults({ defaults, children }) {\n      if (defaults) {\n          return Children.map(children, child => {\n              if (child.type.prototype instanceof ExtJSComponent) {\n                  return cloneElement(child, { ...defaults, ...child.props })\n              } else {\n                  return child;\n              }\n          })\n      } else {\n          return children;\n      }\n  }\n\n  /**\n   * Determines whether a child element corresponds to a config or a container item based on the presence of a rel config or\n   * matching other known relationships\n   * @param {Ext.Base} item\n   */\n  _propForChildElement(item) {\n      if (item.config && item.config.rel) {\n          if (typeof item.config.rel === 'string') {\n              return { name: item.config.rel }\n          } else {\n              return item.config.rel;\n          }\n      }\n\n      const { extJSClass } = this;\n\n      if (isAssignableFrom(extJSClass, CLASS_CACHE.Button) && CLASS_CACHE.Menu && item instanceof CLASS_CACHE.Menu) {\n          return { name: 'menu', array: false };\n      } else if (isAssignableFrom(extJSClass, Ext.Component) && CLASS_CACHE.ToolTip && item instanceof CLASS_CACHE.ToolTip) {\n          return { name: 'tooltip', array: false };\n      } else if (CLASS_CACHE.Column && item instanceof CLASS_CACHE.Column) {\n          return { name: 'columns', array: true };\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.Column) && CLASS_CACHE.CellBase && item instanceof CLASS_CACHE.CellBase) {\n          return { name: 'cell', array: false, value: this._cloneConfig(item) }\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.WidgetCell)) {\n          return { name: 'widget', array: false, value: this._cloneConfig(item) }\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.Dialog) && CLASS_CACHE.Button && item instanceof CLASS_CACHE.Button) {\n          return { name: 'buttons', array: true };\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.Column) && CLASS_CACHE.Field && item instanceof CLASS_CACHE.Field) {\n          return { name: 'editor', array: false, value: this._cloneConfig(item) };\n      }\n  }\n\n  _cloneConfig(item) {\n      return { ...item.initialConfig, xclass: item.$className };\n  }\n\n  /**\n   * If the propName corresponds to an event listener (starts with \"on\" followed by a capital letter), returns the name of the event.\n   * @param {String} propName \n   * @param {String}\n   */\n  _eventNameForProp(propName) {\n      if (propName.match(/^on[A-Z]/)) {\n          return propName.slice(2).toLowerCase();\n      } else {\n          return null;\n      }\n  }\n\n  /**\n   * Creates an Ext config object for this specified props\n   * @param {Object} props\n   * @param {Boolean} [includeEvents] true to convert on* props to listeners, false to exclude them\n   * @private\n   */\n  _createConfig(props, includeEvents) {\n      props = this._cloneProps(props);\n\n      const config = {};\n      config.xtype = this.xtype\n\n      if (includeEvents) config.listeners = {};\n\n\n      for (let key in props) {\n          if (props.hasOwnProperty(key)) {\n              const value = props[key];\n              const eventName = this._eventNameForProp(key);\n\n              if (eventName) {\n                  if (value && includeEvents) config.listeners[eventName] = value;\n              } else if (key === 'config') {\n                  Object.assign(config, value);\n              } else if (key !== 'children' && key !== 'defaults') {\n                  config[key.replace(/className/, 'cls')] = value;\n              }\n          }\n      }\n\n\n      const { extJSClass } = this;\n\n      //need this???\n      // if (isAssignableFrom(extJSClass, CLASS_CACHE.Column) && typeof config.renderer === 'function' && CLASS_CACHE.RendererCell) {\n      //     config.cell = config.cell || {};\n      //     config.cell.xtype = 'renderercell';\n      // }\n\n      return config;\n  }\n\n\n\n  /**\n   * Cloning props rather than passing them directly on as configs fixes issues where Ext JS mutates configs during\n   * component initialization.  One example of this is grid columns get $initParent added when the grid initializes.\n   * @param {Object} props\n   * @private\n   */\n  _cloneProps(props) {\n      return cloneDeepWith(props, value => {\n          if (value instanceof Ext.Base || typeof(value) === 'function') {\n              return value;\n          }\n      })\n  }\n\n  _rushProps(oldProps, newProps) {\n      const rushConfigs = this.extJSClass.__ExtReactUpdateConfigsBeforeChildren;\n      if (!rushConfigs) return;\n      const oldConfigs = {}, newConfigs = {}\n\n      for (let name in rushConfigs) {\n          oldConfigs[name] = oldProps[name];\n          newConfigs[name] = newProps[name]\n      }\n\n      this._applyProps(oldConfigs, newConfigs);\n  }\n\n//   _isEquivalent(a, b) {\n//     // Create arrays of property names\n//     var aProps = Object.getOwnPropertyNames(a);\n//     var bProps = Object.getOwnPropertyNames(b);\n\n//     // If number of properties is different,\n//     // objects are not equivalent\n//     if (aProps.length != bProps.length) {\n//         return false;\n//     }\n\n//     for (var i = 0; i < aProps.length; i++) {\n//         var propName = aProps[i];\n\n//         // If values of same property are not equal,\n//         // objects are not equivalent\n//         if (a[propName] !== b[propName]) {\n//             return false;\n//         }\n//     }\n\n//     // If we made it this far, objects\n//     // are considered equivalent\n//     return true;\n// }\n\n// _shallowEqual(objA, objB) {\n//   if (objA === objB) {\n//     return true;\n//   }\n\n//   if (typeof objA !== 'object' || objA === null ||\n//       typeof objB !== 'object' || objB === null) {\n//     return false;\n//   }\n\n//   var keysA = Object.keys(objA);\n//   var keysB = Object.keys(objB);\n\n//   if (keysA.length !== keysB.length) {\n//     return false;\n//   }\n\n//   // Test for A's keys different from B.\n//   var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n//   for (var i = 0; i < keysA.length; i++) {\n//     if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n//       return false;\n//     }\n//   }\n\n//   return true;\n// }\n\n\n\n\n  /**\n   * Calls config setters for all react props that have changed\n   * @private\n   */\n  _applyProps(oldProps, props) {\n\n    // if (this._shallowEqual(oldProps, props)) {\n    //   console.log('*****************************************************************same'); \n    //   return\n    // }\n    // else {\n    //   console.log('*****************************************************************not same'); \n    // }\n\n    // var oldP = JSON.stringify(oldProps)\n    // var newP = JSON.stringify(props)\n\n    // if (oldP == newP) {\n    //   console.log('*****************************************************************same'); \n    //   return\n    // }\n    // else {\n    //   console.log('*****************************************************************not same'); \n    // }\n\n    // if (JSON.stringify(oldProps) == JSON.stringify(props)) {\n    //   alert('same'); // gives true\n    //   return\n    // }\n\n      const keys = union(Object.keys(oldProps), Object.keys(props));\n      for (let key of keys) {\n          const oldValue = oldProps[key], newValue = props[key];\n          if (key === 'children') continue;\n          if (!isEqual(oldValue, newValue)) {\n              const eventName = this._eventNameForProp(key);\n              if (eventName) {\n//                console.log('*****************************************************************eventName')\n//                console.log(eventName)\n                this._replaceEvent(eventName, oldValue, newValue);\n              } else {\n\n                  const setter = this._setterFor(key);\n                  if (setter) {\n                      const value = this._cloneProps(newValue);\n                      if (this.ExtReactSettings.debug) console.log(setter, newValue, value)\n                      // if (key == 'theme') {\n                      //   Ext.thechart = this.cmp\n                      //   console.log('*****************************************************************setter')\n                      //   console.log(this.cmp.xtype + ' - ' + setter + ' - ' + value) \n                      //   //console.log(this.cmp)\n                      //   //console.log('*****************************************************************value')\n                      //   //console.log(key)\n                      //   //console.log(value)\n                      //   // debugger\n                      //   //this.cmp.setTheme('Purple')\n                      //   //this.cmp.redraw()\n                      //  }\n                      this.cmp[setter](value)\n                  }\n              }\n          }\n      }\n  }\n\n  /**\n   * Detaches the old event listener and adds the new one.\n   * @param {String} eventName \n   * @param {Function} oldHandler \n   * @param {Function} newHandler \n   */\n  _replaceEvent(eventName, oldHandler, newHandler) {\n      if (oldHandler) {\n          if (this.ExtReactSettings.debug) console.log(`detaching old listener for ${eventName}`);\n          this.cmp.un(eventName, oldHandler);\n      }\n\n      if (this.ExtReactSettings.debug) console.log(`attaching new listener for ${eventName}`);\n      this.cmp.on(eventName, newHandler);\n  }\n\n  /**\n   * Returns the name of the setter method for a given prop.\n   * @param {String} prop\n   */\n  _setterFor(prop) {\n      if (prop === 'className') {\n          prop = 'cls';\n      }\n      const name = `set${this._capitalize(prop)}`;\n      return this.cmp[name] && name;\n  }\n\n  /**\n   * Returns the name of a getter for a given prop.\n   * @param {String} prop\n   */\n  _getterFor(prop) {\n      const name = `get${this._capitalize(prop)}`;\n      return this.cmp[name] && name;\n  }\n\n  /**\n   * Capitalizes the first letter in the string\n   * @param {String} str\n   * @return {String}\n   * @private\n   */\n  _capitalize(str) {\n      return capitalize(str[0]) + str.slice(1);\n  }\n\n  _precacheNode() {\n      this._flags |= Flags.hasCachedChildNodes;\n\n      if (this.el) {\n          // will get here when rendering root component\n          precacheNode(this, this.el)\n      } else if (this.cmp.el) {\n          this._doPrecacheNode();\n      } else if (Ext.isClassic) {\n          // we get here when rendering child components due to lazy rendering\n          this.cmp.on('afterrender', this._doPrecacheNode, this, { single: true });\n      }\n  }\n\n  _doPrecacheNode() {\n      this.el = this.cmp.el.dom;\n      this.el._extCmp = this.cmp;\n      precacheNode(this, this.el)\n  }\n\n  /**\n   * Returns the child item at the given index, only counting those items which were created by ExtReact\n   * @param {Number} n\n   */\n  _toReactChildIndex(n) {\n      let items = this.cmp.items;\n\n      if (!items) return n;\n      if (items.items) items = items.items;\n\n      let found=0, i, item;\n\n      for (i=0; i<items.length; i++) {\n          item = items[i];\n\n          if (item.$createdByExtReact && found++ === n) {\n              return i;\n          }\n      }\n\n      return i;\n  }\n\n  /**\n   * Translates and index in props.children to an index within a config value that is an array.  Use\n   * this to determine the position of an item in props.children within the array config to which it is mapped.\n   * @param {*} prop\n   * @param {*} indexInChildren\n   */\n  _toArrayConfigIndex(prop, indexInChildren) {\n      let i=0, found=0;\n\n      Children.forEach(this.props.children, child => {\n          const propForChild = this._propForChildElement(child);\n\n          if (propForChild && propForChild.name === prop.name) {\n              if (i === indexInChildren) return found;\n              found++;\n          }\n      });\n\n      return -1;\n  }\n\n  /**\n   * Updates a config based on a child element\n   * @param {Object} prop The prop descriptor (name and array)\n   * @param {Ext.Base} value The value to set\n   * @param {Number} [index] The index of the child element in props.children\n   * @param {Boolean} [isArrayDelete=false] True if removing the item from an array\n   */\n  _mergeConfig(prop, value, index, isArrayDelete) {\n      const setter = this._setterFor(prop.name);\n      if (!setter) return;\n\n      if (value) value.$ExtReactConfig = true;\n\n      if (prop.array) {\n          const getter = this._getterFor(prop.name);\n          if (!getter) return;\n\n          const currentValue = this.cmp[getter]() || [];\n\n          if (isArrayDelete) {\n              // delete\n              value = currentValue.filter(item => item !== value);\n          } else if (index !== undefined) {\n              // move\n              value = currentValue.filter(item => item !== value);\n              value = value.splice(this._toArrayConfigIndex(index, prop), 0, item);\n          } else {\n              // append\n              value = currentValue.concat(value);\n          }\n      }\n\n      if (this.ExtReactSettings.debug) console.log(setter, value);\n\n      this.cmp[setter](value);\n  }\n\n  _ignoreChildrenOrder() {\n      // maintaining order in certain components, like Transition's container, can cause problems with animations, _ExtReactIgnoreOrder gives us a way to opt out in such scenarios\n      if (this.cmp._ExtReactIgnoreOrder) return true; \n\n      // moving the main child of a container with layout fit causes it to disappear.  Instead we do nothing, which\n      // should be ok because fit containers are not ordered\n      if (CLASS_CACHE.FitLayout && this.cmp.layout instanceof CLASS_CACHE.FitLayout) return true; \n\n      // When tab to the left of the active tab is removed, the left-most tab would always be selected as the tabs to the right are reinserted\n      if (CLASS_CACHE.TabPanel && this.cmp instanceof CLASS_CACHE.TabPanel) return true;\n  }\n}\n\n\n\n/**\n * Wraps a dom element in an Ext Component so it can be added as a child item to an Ext Container.  We attach\n * a reference to the generated Component to the dom element so it can be destroyed later if the dom element\n * is removed when rerendering\n * @param {Object} node A React node object with node, children, and text\n * @returns {Ext.Component}\n */\nfunction wrapDOMElement(node) {\n  let contentEl = node.node;\n\n  const cmp = new Ext.Component({ \n      // We give the wrapper component a class so that developers can reset css \n      // properties (ex. box-sizing: context-box) for third party components.\n      cls: 'x-react-element' \n  });\n  \n  if (cmp.element) {\n      // modern\n      DOMLazyTree.insertTreeBefore(cmp.element.dom, node);\n  } else {\n      // classic\n      const target = document.createElement('div');\n      DOMLazyTree.insertTreeBefore(target, node);\n      cmp.contentEl = contentEl instanceof HTMLElement ? contentEl : target /* text fragment or comment */;\n  }\n\n  cmp.$createdByExtReact = true;\n  contentEl._extCmp = cmp;\n\n  // this is needed for devtools when using dangerouslyReplaceNodeWithMarkup\n  // this not needed in fiber\n  cmp.node = contentEl;\n\n  return cmp;\n}"]}