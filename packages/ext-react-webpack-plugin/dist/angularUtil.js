"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValidateOptions = getValidateOptions;
exports.getDefaultOptions = getDefaultOptions;
exports.getDefaultVars = getDefaultVars;
exports.extractFromSource = extractFromSource;

function getValidateOptions() {
  return {
    "type": "object",
    "properties": {
      "framework": {
        "type": ["string"]
      },
      "port": {
        "type": ["integer"]
      },
      "emit": {
        "type": ["boolean"]
      },
      "browser": {
        "type": ["boolean"]
      },
      "profile": {
        "type": ["string"]
      },
      "environment": {
        "type": ["string"]
      },
      "verbose": {
        "type": ["string"]
      },
      "theme": {
        "type": ["string"]
      },
      "toolkit": {
        "type": ["string"]
      },
      "packages": {
        "type": ["string", "array"]
      }
    },
    "additionalProperties": false // "errorMessage": {
    //   "option": "should be {Boolean} (https:/github.com/org/repo#anchor)"
    // }

  };
}

function getDefaultOptions() {
  return {
    port: 1962,
    emit: true,
    browser: true,
    profile: '',
    environment: 'development',
    verbose: 'no',
    toolkit: 'modern',
    packages: null
  };
}

function getDefaultVars() {
  return {
    firstTime: true,
    firstCompile: true,
    browserCount: 0,
    manifest: null,
    extPath: 'ext-angular',
    pluginErrors: [],
    deps: [],
    rebuild: true
  };
}

function toXtype(str) {
  return str.toLowerCase().replace(/_/g, '-');
}

function extractFromSource(module, vars, options, compilation) {
  try {
    var js = module._source._value;

    const logv = require('./pluginUtil').logv;

    logv(options, 'FUNCTION extractFromSource: ' + vars.framework);
    var statements = [];
    var prefix = '<ext-';

    for (var i = 0; i < js.length; ++i) {
      if (js.substring(i, i + prefix.length) == prefix) {
        var start = js.substring(i);
        var end = start.indexOf(' ');
        var xtype = start.substring(prefix.length, end);
        var type = {
          xtype: toXtype(xtype)
        };
        let config = JSON.stringify(type);
        statements.push(`Ext.create(${config})`);
      }
    }

    return statements;
  } catch (e) {
    require('./pluginUtil').logv(options, e);

    compilation.errors.push('extractFromSource: ' + e);
    return [];
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hbmd1bGFyVXRpbC5qcyJdLCJuYW1lcyI6WyJnZXRWYWxpZGF0ZU9wdGlvbnMiLCJnZXREZWZhdWx0T3B0aW9ucyIsInBvcnQiLCJlbWl0IiwiYnJvd3NlciIsInByb2ZpbGUiLCJlbnZpcm9ubWVudCIsInZlcmJvc2UiLCJ0b29sa2l0IiwicGFja2FnZXMiLCJnZXREZWZhdWx0VmFycyIsImZpcnN0VGltZSIsImZpcnN0Q29tcGlsZSIsImJyb3dzZXJDb3VudCIsIm1hbmlmZXN0IiwiZXh0UGF0aCIsInBsdWdpbkVycm9ycyIsImRlcHMiLCJyZWJ1aWxkIiwidG9YdHlwZSIsInN0ciIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsImV4dHJhY3RGcm9tU291cmNlIiwibW9kdWxlIiwidmFycyIsIm9wdGlvbnMiLCJjb21waWxhdGlvbiIsImpzIiwiX3NvdXJjZSIsIl92YWx1ZSIsImxvZ3YiLCJyZXF1aXJlIiwiZnJhbWV3b3JrIiwic3RhdGVtZW50cyIsInByZWZpeCIsImkiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJzdGFydCIsImVuZCIsImluZGV4T2YiLCJ4dHlwZSIsInR5cGUiLCJjb25maWciLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsImUiLCJlcnJvcnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRU8sU0FBU0Esa0JBQVQsR0FBOEI7QUFDbkMsU0FBTztBQUNMLFlBQVEsUUFESDtBQUVMLGtCQUFjO0FBQ1osbUJBQWU7QUFBQyxnQkFBUSxDQUFFLFFBQUY7QUFBVCxPQURIO0FBRVosY0FBZTtBQUFDLGdCQUFRLENBQUUsU0FBRjtBQUFULE9BRkg7QUFHWixjQUFlO0FBQUMsZ0JBQVEsQ0FBRSxTQUFGO0FBQVQsT0FISDtBQUlaLGlCQUFlO0FBQUMsZ0JBQVEsQ0FBRSxTQUFGO0FBQVQsT0FKSDtBQUtaLGlCQUFlO0FBQUMsZ0JBQVEsQ0FBRSxRQUFGO0FBQVQsT0FMSDtBQU1aLHFCQUFlO0FBQUMsZ0JBQVEsQ0FBRSxRQUFGO0FBQVQsT0FOSDtBQU9aLGlCQUFlO0FBQUMsZ0JBQVEsQ0FBRSxRQUFGO0FBQVQsT0FQSDtBQVFaLGVBQWU7QUFBQyxnQkFBUSxDQUFFLFFBQUY7QUFBVCxPQVJIO0FBU1osaUJBQWU7QUFBQyxnQkFBUSxDQUFFLFFBQUY7QUFBVCxPQVRIO0FBVVosa0JBQWU7QUFBQyxnQkFBUSxDQUFFLFFBQUYsRUFBWSxPQUFaO0FBQVQ7QUFWSCxLQUZUO0FBY0wsNEJBQXdCLEtBZG5CLENBZUw7QUFDQTtBQUNBOztBQWpCSyxHQUFQO0FBbUJEOztBQUVNLFNBQVNDLGlCQUFULEdBQTZCO0FBQ2xDLFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFLElBREQ7QUFFTEMsSUFBQUEsSUFBSSxFQUFFLElBRkQ7QUFHTEMsSUFBQUEsT0FBTyxFQUFFLElBSEo7QUFJTEMsSUFBQUEsT0FBTyxFQUFFLEVBSko7QUFLTEMsSUFBQUEsV0FBVyxFQUFFLGFBTFI7QUFNTEMsSUFBQUEsT0FBTyxFQUFFLElBTko7QUFPTEMsSUFBQUEsT0FBTyxFQUFFLFFBUEo7QUFRTEMsSUFBQUEsUUFBUSxFQUFFO0FBUkwsR0FBUDtBQVVEOztBQUVNLFNBQVNDLGNBQVQsR0FBMEI7QUFDL0IsU0FBTztBQUNMQyxJQUFBQSxTQUFTLEVBQUcsSUFEUDtBQUVMQyxJQUFBQSxZQUFZLEVBQUUsSUFGVDtBQUdMQyxJQUFBQSxZQUFZLEVBQUcsQ0FIVjtBQUlMQyxJQUFBQSxRQUFRLEVBQUUsSUFKTDtBQUtMQyxJQUFBQSxPQUFPLEVBQUUsYUFMSjtBQU1MQyxJQUFBQSxZQUFZLEVBQUUsRUFOVDtBQU9MQyxJQUFBQSxJQUFJLEVBQUUsRUFQRDtBQVFMQyxJQUFBQSxPQUFPLEVBQUU7QUFSSixHQUFQO0FBVUQ7O0FBRUQsU0FBU0MsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0I7QUFDcEIsU0FBT0EsR0FBRyxDQUFDQyxXQUFKLEdBQWtCQyxPQUFsQixDQUEwQixJQUExQixFQUFnQyxHQUFoQyxDQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DQyxJQUFuQyxFQUF5Q0MsT0FBekMsRUFBa0RDLFdBQWxELEVBQStEO0FBQ3BFLE1BQUk7QUFDRixRQUFJQyxFQUFFLEdBQUdKLE1BQU0sQ0FBQ0ssT0FBUCxDQUFlQyxNQUF4Qjs7QUFDQSxVQUFNQyxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQVAsQ0FBd0JELElBQXJDOztBQUNBQSxJQUFBQSxJQUFJLENBQUNMLE9BQUQsRUFBUyxpQ0FBaUNELElBQUksQ0FBQ1EsU0FBL0MsQ0FBSjtBQUNBLFFBQUlDLFVBQVUsR0FBRyxFQUFqQjtBQUNBLFFBQUlDLE1BQU0sR0FBRyxPQUFiOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1IsRUFBRSxDQUFDUyxNQUF2QixFQUErQixFQUFFRCxDQUFqQyxFQUFvQztBQUNsQyxVQUFJUixFQUFFLENBQUNVLFNBQUgsQ0FBYUYsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxNQUFNLENBQUNFLE1BQTNCLEtBQXNDRixNQUExQyxFQUFrRDtBQUNoRCxZQUFJSSxLQUFLLEdBQUdYLEVBQUUsQ0FBQ1UsU0FBSCxDQUFhRixDQUFiLENBQVo7QUFDQSxZQUFJSSxHQUFHLEdBQUdELEtBQUssQ0FBQ0UsT0FBTixDQUFjLEdBQWQsQ0FBVjtBQUNBLFlBQUlDLEtBQUssR0FBR0gsS0FBSyxDQUFDRCxTQUFOLENBQWdCSCxNQUFNLENBQUNFLE1BQXZCLEVBQThCRyxHQUE5QixDQUFaO0FBQ0EsWUFBSUcsSUFBSSxHQUFHO0FBQUVELFVBQUFBLEtBQUssRUFBRXZCLE9BQU8sQ0FBQ3VCLEtBQUQ7QUFBaEIsU0FBWDtBQUNBLFlBQUlFLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVILElBQWYsQ0FBYjtBQUNBVCxRQUFBQSxVQUFVLENBQUNhLElBQVgsQ0FBaUIsY0FBYUgsTUFBTyxHQUFyQztBQUNEO0FBQ0Y7O0FBQ0QsV0FBT1YsVUFBUDtBQUNELEdBakJELENBa0JBLE9BQU1jLENBQU4sRUFBUztBQUNQaEIsSUFBQUEsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QkQsSUFBeEIsQ0FBNkJMLE9BQTdCLEVBQXFDc0IsQ0FBckM7O0FBQ0FyQixJQUFBQSxXQUFXLENBQUNzQixNQUFaLENBQW1CRixJQUFuQixDQUF3Qix3QkFBd0JDLENBQWhEO0FBQ0EsV0FBTyxFQUFQO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWxpZGF0ZU9wdGlvbnMoKSB7XG4gIHJldHVybiB7XG4gICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgIFwiZnJhbWV3b3JrXCI6ICAge1widHlwZVwiOiBbIFwic3RyaW5nXCIgXX0sXG4gICAgICBcInBvcnRcIjogICAgICAgIHtcInR5cGVcIjogWyBcImludGVnZXJcIiBdfSxcbiAgICAgIFwiZW1pdFwiOiAgICAgICAge1widHlwZVwiOiBbIFwiYm9vbGVhblwiIF19LFxuICAgICAgXCJicm93c2VyXCI6ICAgICB7XCJ0eXBlXCI6IFsgXCJib29sZWFuXCIgXX0sXG4gICAgICBcInByb2ZpbGVcIjogICAgIHtcInR5cGVcIjogWyBcInN0cmluZ1wiIF19LFxuICAgICAgXCJlbnZpcm9ubWVudFwiOiB7XCJ0eXBlXCI6IFsgXCJzdHJpbmdcIiBdfSxcbiAgICAgIFwidmVyYm9zZVwiOiAgICAge1widHlwZVwiOiBbIFwic3RyaW5nXCIgXX0sXG4gICAgICBcInRoZW1lXCI6ICAgICAgIHtcInR5cGVcIjogWyBcInN0cmluZ1wiIF19LFxuICAgICAgXCJ0b29sa2l0XCI6ICAgICB7XCJ0eXBlXCI6IFsgXCJzdHJpbmdcIiBdfSxcbiAgICAgIFwicGFja2FnZXNcIjogICAge1widHlwZVwiOiBbIFwic3RyaW5nXCIsIFwiYXJyYXlcIiBdfVxuICAgIH0sXG4gICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZVxuICAgIC8vIFwiZXJyb3JNZXNzYWdlXCI6IHtcbiAgICAvLyAgIFwib3B0aW9uXCI6IFwic2hvdWxkIGJlIHtCb29sZWFufSAoaHR0cHM6L2dpdGh1Yi5jb20vb3JnL3JlcG8jYW5jaG9yKVwiXG4gICAgLy8gfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgcmV0dXJuIHtcbiAgICBwb3J0OiAxOTYyLFxuICAgIGVtaXQ6IHRydWUsXG4gICAgYnJvd3NlcjogdHJ1ZSxcbiAgICBwcm9maWxlOiAnJywgXG4gICAgZW52aXJvbm1lbnQ6ICdkZXZlbG9wbWVudCcsIFxuICAgIHZlcmJvc2U6ICdubycsXG4gICAgdG9vbGtpdDogJ21vZGVybicsXG4gICAgcGFja2FnZXM6IG51bGxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdFZhcnMoKSB7XG4gIHJldHVybiB7XG4gICAgZmlyc3RUaW1lIDogdHJ1ZSxcbiAgICBmaXJzdENvbXBpbGU6IHRydWUsXG4gICAgYnJvd3NlckNvdW50IDogMCxcbiAgICBtYW5pZmVzdDogbnVsbCxcbiAgICBleHRQYXRoOiAnZXh0LWFuZ3VsYXInLFxuICAgIHBsdWdpbkVycm9yczogW10sXG4gICAgZGVwczogW10sXG4gICAgcmVidWlsZDogdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvWHR5cGUoc3RyKSB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fL2csICctJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RGcm9tU291cmNlKG1vZHVsZSwgdmFycywgb3B0aW9ucywgY29tcGlsYXRpb24pIHtcbiAgdHJ5IHtcbiAgICB2YXIganMgPSBtb2R1bGUuX3NvdXJjZS5fdmFsdWVcbiAgICBjb25zdCBsb2d2ID0gcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9ndlxuICAgIGxvZ3Yob3B0aW9ucywnRlVOQ1RJT04gZXh0cmFjdEZyb21Tb3VyY2U6ICcgKyB2YXJzLmZyYW1ld29yaylcbiAgICB2YXIgc3RhdGVtZW50cyA9IFtdXG4gICAgdmFyIHByZWZpeCA9ICc8ZXh0LSdcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoanMuc3Vic3RyaW5nKGksIGkgKyBwcmVmaXgubGVuZ3RoKSA9PSBwcmVmaXgpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0ganMuc3Vic3RyaW5nKGkpXG4gICAgICAgIHZhciBlbmQgPSBzdGFydC5pbmRleE9mKCcgJylcbiAgICAgICAgdmFyIHh0eXBlID0gc3RhcnQuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgsZW5kKVxuICAgICAgICB2YXIgdHlwZSA9IHsgeHR5cGU6IHRvWHR5cGUoeHR5cGUpIH1cbiAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04uc3RyaW5naWZ5KHR5cGUpXG4gICAgICAgIHN0YXRlbWVudHMucHVzaChgRXh0LmNyZWF0ZSgke2NvbmZpZ30pYClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlbWVudHNcbiAgfVxuICBjYXRjaChlKSB7XG4gICAgcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9ndihvcHRpb25zLGUpXG4gICAgY29tcGlsYXRpb24uZXJyb3JzLnB1c2goJ2V4dHJhY3RGcm9tU291cmNlOiAnICsgZSlcbiAgICByZXR1cm4gW11cbiAgfVxufVxuIl19