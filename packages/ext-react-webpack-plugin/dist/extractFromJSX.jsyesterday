"use strict";

var _babylon = require("babylon");

var _astTraverse = _interopRequireDefault(require("ast-traverse"));

var _generator = _interopRequireDefault(require("@babel/generator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MODULE_PATTERN = /^@sencha\/(ext-react.*|ext-\/(classic|modern))$/;

function toXtype(str) {
  return str.toLowerCase().replace(/_/g, '-');
}

module.exports = function extractFromJSX(js, compilation, module) {
  const statements = [];
  const types = {}; // Aliases used for reactify

  const reactifyAliases = new Set([]);
  const ast = (0, _babylon.parse)(js, {
    plugins: ['jsx', 'flow', 'doExpressions', 'objectRestSpread', 'classProperties', 'exportExtensions', 'asyncGenerators', 'functionBind', 'functionSent', 'dynamicImport'],
    sourceType: 'module'
  });

  function addType(varName, reactifyArgNode) {
    //     console.log(varType);console.log(reactifyArgNode);
    if (reactifyArgNode.type === 'StringLiteral') {
      var xtype = toXtype(reactifyArgNode.value);

      if (xtype != 'extreact') {
        types[varName] = {
          xtype: toXtype(reactifyArgNode.value)
        };
      } //console.log(varName)
      //console.log(types[varName])

    } else {
      types[varName] = {
        xclass: js.slice(reactifyArgNode.start, reactifyArgNode.end)
      };
    }
  }

  (0, _astTraverse.default)(ast, {
    pre: function (node) {
      if (node.type == 'VariableDeclarator' && node.init && node.init.type === 'CallExpression' && node.init.callee) {
        if (node.init.callee.name == 'reactify') {
          for (let i = 0; i < node.init.arguments.length; i++) {
            //console.log(node.init.arguments[i].value)
            //              const tagName = node.id.elements[i].name;
            //              if (!tagName) continue;
            const valueNode = node.init.arguments[i];
            if (!valueNode) continue; //console.log(tagName)

            addType(node.init.arguments[i].value, valueNode);
          }
        }
      }

      return; //if (node.type == 'ExpressionStatement') {
      // if(isFile) {
      //   console.log(node.type)
      //   console.log(JSON.stringify(node))
      // }

      if (node.type == 'ImportDeclaration') {
        //console.log(node.type)
        //console.log('node: ' + node.source.value)
        //console.log('option: ' + node.source.value)
        //if (node.source.value.match(MODULE_PATTERN)) {
        if (node.source.value.match('@sencha/')) {
          //console.log('node: ' + node.source.value)
          // look for: import { Grid } from '@sencha/react-modern'
          for (let spec of node.specifiers) {
            types[spec.local.name] = {
              xtype: toXtype(spec.imported.name)
            };
          }
        } else if (node.source.value === `@sencha/ext-react`) {
          // identify local names of reactify based on import { reactify as foo } from '@sencha/ext-react';
          for (let spec of node.specifiers) {
            if (spec.imported.name === 'reactify') {
              reactifyAliases.add(spec.local.name);
            }
          }
        }
      } // Look for reactify calls. Keep track of the names of each component so we can map JSX tags to xtypes and
      // convert props to configs so Sencha Cmd can discover automatic dependencies in the manifest.


      if (node.type == 'VariableDeclarator' && node.init && node.init.type === 'CallExpression' && node.init.callee && reactifyAliases.has(node.init.callee.name)) {
        //console.log(node.type)
        //console.log('VariableDeclarator')
        if (node.id.elements) {
          // example: const [ Panel, Grid ] = reactify('Panel', 'Grid');
          for (let i = 0; i < node.id.elements.length; i++) {
            const tagName = node.id.elements[i].name;
            if (!tagName) continue;
            const valueNode = node.init.arguments[i];
            if (!valueNode) continue;
            addType(tagName, valueNode);
          }
        } else {
          // example: const Grid = reactify('grid');
          const varName = node.id.name;
          const arg = node.init.arguments && node.init.arguments[0] && node.init.arguments[0];
          if (varName && arg) addType(varName, arg);
        }
      } // Convert React.createElement(...) calls to the equivalent Ext.create(...) calls to put in the manifest.


      if (node.type === 'CallExpression' && node.callee.object && node.callee.object.name === 'React' && node.callee.property.name === 'createElement') {
        //console.log(node.type)
        const [tag, props] = node.arguments;
        let type = types[tag.name];

        if (type) {
          let config;

          if (Array.isArray(props.properties)) {
            config = (0, _generator.default)(props).code;

            for (let key in type) {
              config = `{\n  ${key}: '${type[key]}',${config.slice(1)}`;
            }
          } else {
            config = JSON.stringify(type);
          }

          statements.push(`Ext.create(${config})`);
        }
      }
    }
  }); // ensure that all imported classes are present in the build even if they aren't used,
  // otherwise the call to reactify will fail

  for (let key in types) {
    statements.push(`Ext.create(${JSON.stringify(types[key])})`);
  } // console.log('\n\nstatements:')
  // console.log(statements)
  // console.log('\n\n')


  return statements;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,