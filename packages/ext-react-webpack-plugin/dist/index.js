'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

class ExtWebpackPlugin {
  constructor(options) {
    this.plugin = require(`./pluginUtil`)._constructor(options);
  }

  apply(compiler) {
    if (compiler.hooks) {
      compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
        if (this.plugin.vars.pluginErrors.length > 0) {
          compilation.errors.push(new Error(this.plugin.vars.pluginErrors.join("")));
        }
      });

      if (this.plugin.vars.pluginErrors.length > 0) {
        return;
      }

      if (this.plugin.vars.framework == 'extjs') {
        compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
          require(`./extjsUtil`)._afterCompile(compilation, this.plugin.vars, this.plugin.options);
        });
      } else {
        compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
          require(`./pluginUtil`)._compilation(compilation, this.plugin.vars, this.plugin.options);
        });
      }

      if (this.plugin.options.emit == true) {
        compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
          require(`./pluginUtil`).emit(compiler, compilation, this.plugin.vars, this.plugin.options, callback);
        });
      } else {
        require('./pluginUtil').log(`${this.plugin.vars.app}Emit not run`);
      }

      compiler.hooks.done.tap(`ext-done`, () => {
        require('./pluginUtil').log(this.plugin.vars.app + `Completed ext-webpack-plugin processing`);
      });
    } else {
      console.log('not webpack 4');
    }
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRXh0V2VicGFja1BsdWdpbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInBsdWdpbiIsIl9jb25zdHJ1Y3RvciIsImFwcGx5IiwiY29tcGlsZXIiLCJob29rcyIsInRoaXNDb21waWxhdGlvbiIsInRhcCIsImNvbXBpbGF0aW9uIiwidmFycyIsInBsdWdpbkVycm9ycyIsImxlbmd0aCIsImVycm9ycyIsInB1c2giLCJFcnJvciIsImpvaW4iLCJmcmFtZXdvcmsiLCJhZnRlckNvbXBpbGUiLCJfYWZ0ZXJDb21waWxlIiwiX2NvbXBpbGF0aW9uIiwiZW1pdCIsInRhcEFzeW5jIiwiY2FsbGJhY2siLCJsb2ciLCJhcHAiLCJkb25lIiwiY29uc29sZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFDQUEsT0FBTyxDQUFDLGlCQUFELENBQVA7O0FBRWUsTUFBTUMsZ0JBQU4sQ0FBdUI7QUFDcENDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFNBQUtDLE1BQUwsR0FBY0osT0FBTyxDQUFFLGNBQUYsQ0FBUCxDQUF3QkssWUFBeEIsQ0FBcUNGLE9BQXJDLENBQWQ7QUFDRDs7QUFDREcsRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxRQUFJQSxRQUFRLENBQUNDLEtBQWIsRUFBb0I7QUFFbEJELE1BQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlQyxlQUFmLENBQStCQyxHQUEvQixDQUFvQyxzQkFBcEMsRUFBNERDLFdBQUQsSUFBaUI7QUFDMUUsWUFBSSxLQUFLUCxNQUFMLENBQVlRLElBQVosQ0FBaUJDLFlBQWpCLENBQThCQyxNQUE5QixHQUF1QyxDQUEzQyxFQUE4QztBQUM1Q0gsVUFBQUEsV0FBVyxDQUFDSSxNQUFaLENBQW1CQyxJQUFuQixDQUF5QixJQUFJQyxLQUFKLENBQVUsS0FBS2IsTUFBTCxDQUFZUSxJQUFaLENBQWlCQyxZQUFqQixDQUE4QkssSUFBOUIsQ0FBbUMsRUFBbkMsQ0FBVixDQUF6QjtBQUNEO0FBQ0YsT0FKRDs7QUFNQSxVQUFJLEtBQUtkLE1BQUwsQ0FBWVEsSUFBWixDQUFpQkMsWUFBakIsQ0FBOEJDLE1BQTlCLEdBQXVDLENBQTNDLEVBQThDO0FBQzVDO0FBQ0Q7O0FBRUQsVUFBSyxLQUFLVixNQUFMLENBQVlRLElBQVosQ0FBaUJPLFNBQWpCLElBQThCLE9BQW5DLEVBQTRDO0FBQzFDWixRQUFBQSxRQUFRLENBQUNDLEtBQVQsQ0FBZVksWUFBZixDQUE0QlYsR0FBNUIsQ0FBZ0MsbUJBQWhDLEVBQXNEQyxXQUFELElBQWlCO0FBQ3BFWCxVQUFBQSxPQUFPLENBQUUsYUFBRixDQUFQLENBQXVCcUIsYUFBdkIsQ0FBcUNWLFdBQXJDLEVBQWtELEtBQUtQLE1BQUwsQ0FBWVEsSUFBOUQsRUFBb0UsS0FBS1IsTUFBTCxDQUFZRCxPQUFoRjtBQUNELFNBRkQ7QUFHRCxPQUpELE1BS0s7QUFDSEksUUFBQUEsUUFBUSxDQUFDQyxLQUFULENBQWVHLFdBQWYsQ0FBMkJELEdBQTNCLENBQWdDLGlCQUFoQyxFQUFtREMsV0FBRCxJQUFpQjtBQUNqRVgsVUFBQUEsT0FBTyxDQUFFLGNBQUYsQ0FBUCxDQUF3QnNCLFlBQXhCLENBQXFDWCxXQUFyQyxFQUFrRCxLQUFLUCxNQUFMLENBQVlRLElBQTlELEVBQW9FLEtBQUtSLE1BQUwsQ0FBWUQsT0FBaEY7QUFDRCxTQUZEO0FBR0Q7O0FBRUQsVUFBSSxLQUFLQyxNQUFMLENBQVlELE9BQVosQ0FBb0JvQixJQUFwQixJQUE0QixJQUFoQyxFQUFzQztBQUNwQ2hCLFFBQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlZSxJQUFmLENBQW9CQyxRQUFwQixDQUE4QixVQUE5QixFQUF5QyxDQUFDYixXQUFELEVBQWNjLFFBQWQsS0FBMkI7QUFDbEV6QixVQUFBQSxPQUFPLENBQUUsY0FBRixDQUFQLENBQXdCdUIsSUFBeEIsQ0FBNkJoQixRQUE3QixFQUF1Q0ksV0FBdkMsRUFBb0QsS0FBS1AsTUFBTCxDQUFZUSxJQUFoRSxFQUFzRSxLQUFLUixNQUFMLENBQVlELE9BQWxGLEVBQTJGc0IsUUFBM0Y7QUFDRCxTQUZEO0FBR0QsT0FKRCxNQUtLO0FBQ0h6QixRQUFBQSxPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCMEIsR0FBeEIsQ0FBNkIsR0FBRSxLQUFLdEIsTUFBTCxDQUFZUSxJQUFaLENBQWlCZSxHQUFJLGNBQXBEO0FBQ0Q7O0FBRURwQixNQUFBQSxRQUFRLENBQUNDLEtBQVQsQ0FBZW9CLElBQWYsQ0FBb0JsQixHQUFwQixDQUF5QixVQUF6QixFQUFvQyxNQUFNO0FBQ3hDVixRQUFBQSxPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCMEIsR0FBeEIsQ0FBNEIsS0FBS3RCLE1BQUwsQ0FBWVEsSUFBWixDQUFpQmUsR0FBakIsR0FBd0IseUNBQXBEO0FBQ0QsT0FGRDtBQUlELEtBcENELE1BcUNLO0FBQUNFLE1BQUFBLE9BQU8sQ0FBQ0gsR0FBUixDQUFZLGVBQVo7QUFBNkI7QUFDcEM7O0FBM0NtQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xucmVxdWlyZSgnQGJhYmVsL3BvbHlmaWxsJylcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXh0V2VicGFja1BsdWdpbiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLnBsdWdpbiA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICB9XG4gIGFwcGx5KGNvbXBpbGVyKSB7XG4gICAgaWYgKGNvbXBpbGVyLmhvb2tzKSB7XG5cbiAgICAgIGNvbXBpbGVyLmhvb2tzLnRoaXNDb21waWxhdGlvbi50YXAoYGV4dC10aGlzLWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi52YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29tcGlsYXRpb24uZXJyb3JzLnB1c2goIG5ldyBFcnJvcih0aGlzLnBsdWdpbi52YXJzLnBsdWdpbkVycm9ycy5qb2luKFwiXCIpKSApXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmICh0aGlzLnBsdWdpbi52YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIHRoaXMucGx1Z2luLnZhcnMuZnJhbWV3b3JrID09ICdleHRqcycpIHtcbiAgICAgICAgY29tcGlsZXIuaG9va3MuYWZ0ZXJDb21waWxlLnRhcCgnZXh0LWFmdGVyLWNvbXBpbGUnLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgICAgICByZXF1aXJlKGAuL2V4dGpzVXRpbGApLl9hZnRlckNvbXBpbGUoY29tcGlsYXRpb24sIHRoaXMucGx1Z2luLnZhcnMsIHRoaXMucGx1Z2luLm9wdGlvbnMpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29tcGlsZXIuaG9va3MuY29tcGlsYXRpb24udGFwKGBleHQtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgICAgICByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5fY29tcGlsYXRpb24oY29tcGlsYXRpb24sIHRoaXMucGx1Z2luLnZhcnMsIHRoaXMucGx1Z2luLm9wdGlvbnMpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnBsdWdpbi5vcHRpb25zLmVtaXQgPT0gdHJ1ZSkge1xuICAgICAgICBjb21waWxlci5ob29rcy5lbWl0LnRhcEFzeW5jKGBleHQtZW1pdGAsIChjb21waWxhdGlvbiwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5lbWl0KGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdGhpcy5wbHVnaW4udmFycywgdGhpcy5wbHVnaW4ub3B0aW9ucywgY2FsbGJhY2spXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9nKGAke3RoaXMucGx1Z2luLnZhcnMuYXBwfUVtaXQgbm90IHJ1bmApXG4gICAgICB9XG5cbiAgICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsICgpID0+IHtcbiAgICAgICAgcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9nKHRoaXMucGx1Z2luLnZhcnMuYXBwICsgYENvbXBsZXRlZCBleHQtd2VicGFjay1wbHVnaW4gcHJvY2Vzc2luZ2ApXG4gICAgICB9KVxuXG4gICAgfVxuICAgIGVsc2Uge2NvbnNvbGUubG9nKCdub3Qgd2VicGFjayA0Jyl9XG4gIH1cbn1cbiJdfQ==