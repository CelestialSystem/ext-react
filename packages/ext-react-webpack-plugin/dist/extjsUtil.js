"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValidateOptions = getValidateOptions;
exports.getDefaultOptions = getDefaultOptions;
exports.getDefaultVars = getDefaultVars;
exports._afterCompile = _afterCompile;
exports._prepareForBuild = _prepareForBuild;

function getValidateOptions() {
  return {
    "type": "object",
    "properties": {
      "framework": {
        "type": ["string"]
      },
      "port": {
        "type": ["integer"]
      },
      "emit": {
        "type": ["boolean"]
      },
      "browser": {
        "type": ["boolean"]
      },
      "profile": {
        "type": ["string"]
      },
      "environment": {
        "type": ["string"]
      },
      "verbose": {
        "type": ["string"]
      }
    },
    "additionalProperties": false // "errorMessage": {
    //   "option": "should be {Boolean} (https:/github.com/org/repo#anchor)"
    // }

  };
}

function getDefaultOptions() {
  return {
    port: 1962,
    emit: true,
    browser: true,
    profile: 'desktop',
    environment: 'development',
    verbose: 'no'
  };
}

function getDefaultVars() {
  return {
    firstTime: true,
    browserCount: 0,
    cwd: process.cwd(),
    extPath: '.',
    pluginErrors: [],
    lastNumFiles: 0,
    lastMilliseconds: 0,
    lastMillisecondsAppJson: 0,
    files: ['./app.json'],
    dirs: ['./app', './packages']
  };
}

function _afterCompile(compilation, vars, options) {
  try {
    require('./pluginUtil').logv(options, 'FUNCTION ext-after-compile');

    const path = require('path');

    let {
      files,
      dirs
    } = vars;
    const {
      cwd
    } = vars;
    files = typeof files === 'string' ? [files] : files;
    dirs = typeof dirs === 'string' ? [dirs] : dirs;

    const {
      fileDependencies,
      contextDependencies
    } = _getFileAndContextDeps(compilation, files, dirs, cwd, options);

    if (files.length > 0) {
      fileDependencies.forEach(file => {
        compilation.fileDependencies.add(path.resolve(file));
      });
    }

    if (dirs.length > 0) {
      contextDependencies.forEach(context => {
        compilation.contextDependencies.add(context);
      });
    }
  } catch (e) {
    console.log(e);
    compilation.errors.push('_afterCompile: ' + e);
  }
}

function _getFileAndContextDeps(compilation, files, dirs, cwd, options) {
  require('./pluginUtil').logv(options, 'FUNCTION _getFileAndContextDeps');

  const uniq = require('lodash.uniq');

  const isGlob = require('is-glob');

  const {
    fileDependencies,
    contextDependencies
  } = compilation;
  const isWebpack4 = compilation.hooks;
  let fds = isWebpack4 ? [...fileDependencies] : fileDependencies;
  let cds = isWebpack4 ? [...contextDependencies] : contextDependencies;

  if (files.length > 0) {
    files.forEach(pattern => {
      let f = pattern;

      if (isGlob(pattern)) {
        f = glob.sync(pattern, {
          cwd,
          dot: true,
          absolute: true
        });
      }

      fds = fds.concat(f);
    });
    fds = uniq(fds);
  }

  if (dirs.length > 0) {
    cds = uniq(cds.concat(dirs));
  }

  return {
    fileDependencies: fds,
    contextDependencies: cds
  };
}

function _prepareForBuild(app, vars, options, output, compilation) {
  try {
    const log = require('./pluginUtil').log;

    const logv = require('./pluginUtil').logv;

    logv(options, '_prepareForBuild');

    const fs = require('fs');

    const recursiveReadSync = require('recursive-readdir-sync');

    var watchedFiles = [];

    try {
      watchedFiles = recursiveReadSync('./app').concat(recursiveReadSync('./packages'));
    } catch (err) {
      if (err.errno === 34) {
        console.log('Path does not exist');
      } else {
        throw err;
      }
    }

    var currentNumFiles = watchedFiles.length;
    logv(options, 'watchedFiles: ' + currentNumFiles);
    var doBuild = true; // var doBuild = false
    // for (var file in watchedFiles) {
    //   if (vars.lastMilliseconds < fs.statSync(watchedFiles[file]).mtimeMs) {
    //     if (watchedFiles[file].indexOf("scss") != -1) {doBuild=true;break;}
    //   }
    // }
    // if (vars.lastMilliseconds < fs.statSync('./app.json').mtimeMs) {
    //   doBuild=true
    // }

    logv(options, 'doBuild: ' + doBuild);
    vars.lastMilliseconds = new Date().getTime();
    var filesource = 'this file enables client reload';
    compilation.assets[currentNumFiles + 'FilesUnderAppFolder.md'] = {
      source: function () {
        return filesource;
      },
      size: function () {
        return filesource.length;
      }
    };
    logv(options, 'currentNumFiles: ' + currentNumFiles);
    logv(options, 'vars.lastNumFiles: ' + vars.lastNumFiles);
    logv(options, 'doBuild: ' + doBuild);

    if (currentNumFiles != vars.lastNumFiles || doBuild) {
      vars.rebuild = true;
      log(app + 'building Ext bundle at: ' + output.replace(process.cwd(), ''));
    } else {
      vars.rebuild = false;
    }

    vars.lastNumFiles = currentNumFiles;
  } catch (e) {
    console.log(e);
    compilation.errors.push('_prepareForBuild: ' + e);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leHRqc1V0aWwuanMiXSwibmFtZXMiOlsiZ2V0VmFsaWRhdGVPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJwb3J0IiwiZW1pdCIsImJyb3dzZXIiLCJwcm9maWxlIiwiZW52aXJvbm1lbnQiLCJ2ZXJib3NlIiwiZ2V0RGVmYXVsdFZhcnMiLCJmaXJzdFRpbWUiLCJicm93c2VyQ291bnQiLCJjd2QiLCJwcm9jZXNzIiwiZXh0UGF0aCIsInBsdWdpbkVycm9ycyIsImxhc3ROdW1GaWxlcyIsImxhc3RNaWxsaXNlY29uZHMiLCJsYXN0TWlsbGlzZWNvbmRzQXBwSnNvbiIsImZpbGVzIiwiZGlycyIsIl9hZnRlckNvbXBpbGUiLCJjb21waWxhdGlvbiIsInZhcnMiLCJvcHRpb25zIiwicmVxdWlyZSIsImxvZ3YiLCJwYXRoIiwiZmlsZURlcGVuZGVuY2llcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJfZ2V0RmlsZUFuZENvbnRleHREZXBzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImZpbGUiLCJhZGQiLCJyZXNvbHZlIiwiY29udGV4dCIsImUiLCJjb25zb2xlIiwibG9nIiwiZXJyb3JzIiwicHVzaCIsInVuaXEiLCJpc0dsb2IiLCJpc1dlYnBhY2s0IiwiaG9va3MiLCJmZHMiLCJjZHMiLCJwYXR0ZXJuIiwiZiIsImdsb2IiLCJzeW5jIiwiZG90IiwiYWJzb2x1dGUiLCJjb25jYXQiLCJfcHJlcGFyZUZvckJ1aWxkIiwiYXBwIiwib3V0cHV0IiwiZnMiLCJyZWN1cnNpdmVSZWFkU3luYyIsIndhdGNoZWRGaWxlcyIsImVyciIsImVycm5vIiwiY3VycmVudE51bUZpbGVzIiwiZG9CdWlsZCIsIkRhdGUiLCJnZXRUaW1lIiwiZmlsZXNvdXJjZSIsImFzc2V0cyIsInNvdXJjZSIsInNpemUiLCJyZWJ1aWxkIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBRU8sU0FBU0Esa0JBQVQsR0FBOEI7QUFDbkMsU0FBTztBQUNM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QUFJLENBQUNQLFlBQXhCLElBQXdDZ0QsT0FBNUMsRUFBcUQ7QUFDbkR6QyxNQUFBQSxJQUFJLENBQUNnRCxPQUFMLEdBQWUsSUFBZjtBQUNBaEMsTUFBQUEsR0FBRyxDQUFDaUIsR0FBRyxHQUFHLDBCQUFOLEdBQW1DQyxNQUFNLENBQUNlLE9BQVAsQ0FBZTNELE9BQU8sQ0FBQ0QsR0FBUixFQUFmLEVBQThCLEVBQTlCLENBQXBDLENBQUg7QUFDRCxLQUhELE1BSUs7QUFDSFcsTUFBQUEsSUFBSSxDQUFDZ0QsT0FBTCxHQUFlLEtBQWY7QUFDRDs7QUFDRGhELElBQUFBLElBQUksQ0FBQ1AsWUFBTCxHQUFvQitDLGVBQXBCO0FBQ0QsR0E1Q0QsQ0E2Q0EsT0FBTTFCLENBQU4sRUFBUztBQUNQQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsQ0FBWjtBQUNBZixJQUFBQSxXQUFXLENBQUNrQixNQUFaLENBQW1CQyxJQUFuQixDQUF3Qix1QkFBdUJKLENBQS9DO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWxpZGF0ZU9wdGlvbnMoKSB7XG4gIHJldHVybiB7XG4gICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgIFwiZnJhbWV3b3JrXCI6ICAge1widHlwZVwiOiBbIFwic3RyaW5nXCIgXX0sXG4gICAgICBcInBvcnRcIjogICAgICAgIHtcInR5cGVcIjogWyBcImludGVnZXJcIiBdfSxcbiAgICAgIFwiZW1pdFwiOiAgICAgICAge1widHlwZVwiOiBbIFwiYm9vbGVhblwiIF19LFxuICAgICAgXCJicm93c2VyXCI6ICAgICB7XCJ0eXBlXCI6IFsgXCJib29sZWFuXCIgXX0sXG4gICAgICBcInByb2ZpbGVcIjogICAgIHtcInR5cGVcIjogWyBcInN0cmluZ1wiIF19LFxuICAgICAgXCJlbnZpcm9ubWVudFwiOiB7XCJ0eXBlXCI6IFsgXCJzdHJpbmdcIiBdfSxcbiAgICAgIFwidmVyYm9zZVwiOiAgICAge1widHlwZVwiOiBbIFwic3RyaW5nXCIgXX1cbiAgICB9LFxuICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2VcbiAgICAvLyBcImVycm9yTWVzc2FnZVwiOiB7XG4gICAgLy8gICBcIm9wdGlvblwiOiBcInNob3VsZCBiZSB7Qm9vbGVhbn0gKGh0dHBzOi9naXRodWIuY29tL29yZy9yZXBvI2FuY2hvcilcIlxuICAgIC8vIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiB7XG4gICAgcG9ydDogMTk2MixcbiAgICBlbWl0OiB0cnVlLFxuICAgIGJyb3dzZXI6IHRydWUsXG4gICAgcHJvZmlsZTogJ2Rlc2t0b3AnLCBcbiAgICBlbnZpcm9ubWVudDogJ2RldmVsb3BtZW50JywgXG4gICAgdmVyYm9zZTogJ25vJ1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VmFycygpIHtcbiAgcmV0dXJuIHtcbiAgICBmaXJzdFRpbWUgOiB0cnVlLFxuICAgIGJyb3dzZXJDb3VudCA6IDAsXG4gICAgY3dkOiBwcm9jZXNzLmN3ZCgpLFxuICAgIGV4dFBhdGg6ICcuJyxcbiAgICBwbHVnaW5FcnJvcnM6IFtdLFxuICAgIGxhc3ROdW1GaWxlczogMCxcbiAgICBsYXN0TWlsbGlzZWNvbmRzOiAwLFxuICAgIGxhc3RNaWxsaXNlY29uZHNBcHBKc29uOiAwLFxuICAgIGZpbGVzOiBbJy4vYXBwLmpzb24nXSxcbiAgICBkaXJzOiBbJy4vYXBwJywnLi9wYWNrYWdlcyddXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9hZnRlckNvbXBpbGUoY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2d2KG9wdGlvbnMsJ0ZVTkNUSU9OIGV4dC1hZnRlci1jb21waWxlJylcbiAgICBjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG4gICAgbGV0IHsgZmlsZXMsIGRpcnMgfSA9IHZhcnNcbiAgICBjb25zdCB7IGN3ZCB9ID0gdmFyc1xuICAgIGZpbGVzID0gdHlwZW9mIGZpbGVzID09PSAnc3RyaW5nJyA/IFtmaWxlc10gOiBmaWxlc1xuICAgIGRpcnMgPSB0eXBlb2YgZGlycyA9PT0gJ3N0cmluZycgPyBbZGlyc10gOiBkaXJzXG4gICAgY29uc3Qge1xuICAgICAgZmlsZURlcGVuZGVuY2llcyxcbiAgICAgIGNvbnRleHREZXBlbmRlbmNpZXMsXG4gICAgfSA9IF9nZXRGaWxlQW5kQ29udGV4dERlcHMoY29tcGlsYXRpb24sIGZpbGVzLCBkaXJzLCBjd2QsIG9wdGlvbnMpO1xuICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICBmaWxlRGVwZW5kZW5jaWVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgICAgY29tcGlsYXRpb24uZmlsZURlcGVuZGVuY2llcy5hZGQocGF0aC5yZXNvbHZlKGZpbGUpKTtcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChkaXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnRleHREZXBlbmRlbmNpZXMuZm9yRWFjaCgoY29udGV4dCkgPT4ge1xuICAgICAgICBjb21waWxhdGlvbi5jb250ZXh0RGVwZW5kZW5jaWVzLmFkZChjb250ZXh0KTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG4gIGNhdGNoKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKVxuICAgIGNvbXBpbGF0aW9uLmVycm9ycy5wdXNoKCdfYWZ0ZXJDb21waWxlOiAnICsgZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0RmlsZUFuZENvbnRleHREZXBzKGNvbXBpbGF0aW9uLCBmaWxlcywgZGlycywgY3dkLCBvcHRpb25zKSB7XG4gIHJlcXVpcmUoJy4vcGx1Z2luVXRpbCcpLmxvZ3Yob3B0aW9ucywnRlVOQ1RJT04gX2dldEZpbGVBbmRDb250ZXh0RGVwcycpXG4gIGNvbnN0IHVuaXEgPSByZXF1aXJlKCdsb2Rhc2gudW5pcScpXG4gIGNvbnN0IGlzR2xvYiA9IHJlcXVpcmUoJ2lzLWdsb2InKVxuXG4gIGNvbnN0IHsgZmlsZURlcGVuZGVuY2llcywgY29udGV4dERlcGVuZGVuY2llcyB9ID0gY29tcGlsYXRpb247XG4gIGNvbnN0IGlzV2VicGFjazQgPSBjb21waWxhdGlvbi5ob29rcztcbiAgbGV0IGZkcyA9IGlzV2VicGFjazQgPyBbLi4uZmlsZURlcGVuZGVuY2llc10gOiBmaWxlRGVwZW5kZW5jaWVzO1xuICBsZXQgY2RzID0gaXNXZWJwYWNrNCA/IFsuLi5jb250ZXh0RGVwZW5kZW5jaWVzXSA6IGNvbnRleHREZXBlbmRlbmNpZXM7XG4gIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgZmlsZXMuZm9yRWFjaCgocGF0dGVybikgPT4ge1xuICAgICAgbGV0IGYgPSBwYXR0ZXJuXG4gICAgICBpZiAoaXNHbG9iKHBhdHRlcm4pKSB7XG4gICAgICAgIGYgPSBnbG9iLnN5bmMocGF0dGVybiwgeyBjd2QsIGRvdDogdHJ1ZSwgYWJzb2x1dGU6IHRydWUgfSlcbiAgICAgIH1cbiAgICAgIGZkcyA9IGZkcy5jb25jYXQoZilcbiAgICB9KVxuICAgIGZkcyA9IHVuaXEoZmRzKVxuICB9XG4gIGlmIChkaXJzLmxlbmd0aCA+IDApIHtcbiAgICBjZHMgPSB1bmlxKGNkcy5jb25jYXQoZGlycykpXG4gIH1cbiAgcmV0dXJuIHsgZmlsZURlcGVuZGVuY2llczogZmRzLCBjb250ZXh0RGVwZW5kZW5jaWVzOiBjZHMgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX3ByZXBhcmVGb3JCdWlsZChhcHAsIHZhcnMsIG9wdGlvbnMsIG91dHB1dCwgY29tcGlsYXRpb24pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBsb2cgPSByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2dcbiAgICBjb25zdCBsb2d2ID0gcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9ndlxuICAgIGxvZ3Yob3B0aW9ucywnX3ByZXBhcmVGb3JCdWlsZCcpXG4gICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG4gICAgY29uc3QgcmVjdXJzaXZlUmVhZFN5bmMgPSByZXF1aXJlKCdyZWN1cnNpdmUtcmVhZGRpci1zeW5jJylcbiAgICB2YXIgd2F0Y2hlZEZpbGVzPVtdXG4gICAgdHJ5IHt3YXRjaGVkRmlsZXMgPSByZWN1cnNpdmVSZWFkU3luYygnLi9hcHAnKS5jb25jYXQocmVjdXJzaXZlUmVhZFN5bmMoJy4vcGFja2FnZXMnKSl9XG4gICAgY2F0Y2goZXJyKSB7aWYoZXJyLmVycm5vID09PSAzNCl7Y29uc29sZS5sb2coJ1BhdGggZG9lcyBub3QgZXhpc3QnKTt9IGVsc2Uge3Rocm93IGVycjt9fVxuICAgIHZhciBjdXJyZW50TnVtRmlsZXMgPSB3YXRjaGVkRmlsZXMubGVuZ3RoXG4gICAgbG9ndihvcHRpb25zLCd3YXRjaGVkRmlsZXM6ICcgKyBjdXJyZW50TnVtRmlsZXMpXG4gICAgdmFyIGRvQnVpbGQgPSB0cnVlXG5cbiAgICAvLyB2YXIgZG9CdWlsZCA9IGZhbHNlXG4gICAgLy8gZm9yICh2YXIgZmlsZSBpbiB3YXRjaGVkRmlsZXMpIHtcbiAgICAvLyAgIGlmICh2YXJzLmxhc3RNaWxsaXNlY29uZHMgPCBmcy5zdGF0U3luYyh3YXRjaGVkRmlsZXNbZmlsZV0pLm10aW1lTXMpIHtcbiAgICAvLyAgICAgaWYgKHdhdGNoZWRGaWxlc1tmaWxlXS5pbmRleE9mKFwic2Nzc1wiKSAhPSAtMSkge2RvQnVpbGQ9dHJ1ZTticmVhazt9XG4gICAgLy8gICB9XG4gICAgLy8gfVxuICAgIC8vIGlmICh2YXJzLmxhc3RNaWxsaXNlY29uZHMgPCBmcy5zdGF0U3luYygnLi9hcHAuanNvbicpLm10aW1lTXMpIHtcbiAgICAvLyAgIGRvQnVpbGQ9dHJ1ZVxuICAgIC8vIH1cbiAgICBcbiAgICBsb2d2KG9wdGlvbnMsJ2RvQnVpbGQ6ICcgKyBkb0J1aWxkKVxuXG4gICAgdmFycy5sYXN0TWlsbGlzZWNvbmRzID0gKG5ldyBEYXRlKS5nZXRUaW1lKClcbiAgICB2YXIgZmlsZXNvdXJjZSA9ICd0aGlzIGZpbGUgZW5hYmxlcyBjbGllbnQgcmVsb2FkJ1xuICAgIGNvbXBpbGF0aW9uLmFzc2V0c1tjdXJyZW50TnVtRmlsZXMgKyAnRmlsZXNVbmRlckFwcEZvbGRlci5tZCddID0ge1xuICAgICAgc291cmNlOiBmdW5jdGlvbigpIHtyZXR1cm4gZmlsZXNvdXJjZX0sXG4gICAgICBzaXplOiBmdW5jdGlvbigpIHtyZXR1cm4gZmlsZXNvdXJjZS5sZW5ndGh9XG4gICAgfVxuXG4gICAgbG9ndihvcHRpb25zLCdjdXJyZW50TnVtRmlsZXM6ICcgKyBjdXJyZW50TnVtRmlsZXMpXG4gICAgbG9ndihvcHRpb25zLCd2YXJzLmxhc3ROdW1GaWxlczogJyArIHZhcnMubGFzdE51bUZpbGVzKVxuICAgIGxvZ3Yob3B0aW9ucywnZG9CdWlsZDogJyArIGRvQnVpbGQpXG5cbiAgICBpZiAoY3VycmVudE51bUZpbGVzICE9IHZhcnMubGFzdE51bUZpbGVzIHx8IGRvQnVpbGQpIHtcbiAgICAgIHZhcnMucmVidWlsZCA9IHRydWVcbiAgICAgIGxvZyhhcHAgKyAnYnVpbGRpbmcgRXh0IGJ1bmRsZSBhdDogJyArIG91dHB1dC5yZXBsYWNlKHByb2Nlc3MuY3dkKCksICcnKSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXJzLnJlYnVpbGQgPSBmYWxzZVxuICAgIH1cbiAgICB2YXJzLmxhc3ROdW1GaWxlcyA9IGN1cnJlbnROdW1GaWxlc1xuICB9XG4gIGNhdGNoKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKVxuICAgIGNvbXBpbGF0aW9uLmVycm9ycy5wdXNoKCdfcHJlcGFyZUZvckJ1aWxkOiAnICsgZSlcbiAgfVxufVxuIl19